//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Game/_Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Dev Cheats"",
            ""id"": ""1f2e13c0-df72-497d-b7ed-4939331eb21e"",
            ""actions"": [
                {
                    ""name"": ""Next Level"",
                    ""type"": ""Button"",
                    ""id"": ""502a394b-8d45-4afc-bb57-504c90aa412f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Prev Level"",
                    ""type"": ""Button"",
                    ""id"": ""068e674b-6076-43c6-be01-ffac60b74169"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Next Stage"",
                    ""type"": ""Button"",
                    ""id"": ""58139453-f6b5-4e08-b996-375fedc39293"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PauseToggle"",
                    ""type"": ""Button"",
                    ""id"": ""58aa1a30-9a9a-4f38-aa4f-218aafefe828"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""31d0f56e-1207-47fc-97f3-49c1e07ece75"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next Level"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1edbae40-2c93-4edd-91f5-f0c22f0c4c35"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Prev Level"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50f8e49a-1422-4dd8-b80e-ae747b695e1a"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next Stage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a626007d-a8ce-4693-84d2-6ab87cc63149"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""id"": ""027526c5-59f0-46bd-8768-246a666b036b"",
            ""actions"": [
                {
                    ""name"": ""TouchDelta"",
                    ""type"": ""PassThrough"",
                    ""id"": ""cb4d1c87-93f6-4aa6-9087-b149f25ac878"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchStartPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""07e72776-49d3-4be9-ab19-0b69e9f050b7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPress"",
                    ""type"": ""Button"",
                    ""id"": ""be812b2b-bbce-463a-ac81-4b792b7825fd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchRelease"",
                    ""type"": ""Button"",
                    ""id"": ""fc99cb7a-699b-4eb5-9913-fd5481c60187"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ff44ae7c-8e06-4a81-b8a1-127047cb4981"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TapCount"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b1b98003-86b8-441d-abb6-ef4b3fc4a2a3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0201f42b-d70f-4487-8ac0-4725f13fb1d7"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a9e804b-a2fc-4958-9433-ace7be6884af"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1e135d5-2536-4202-ae99-6a35152a3680"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9bc343c1-fa92-435e-bf38-1ff194c68c61"",
                    ""path"": ""<Touchscreen>/touch0/startPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchStartPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef1d43e6-c61a-4ff6-8e9e-64494da2a44d"",
                    ""path"": ""<Touchscreen>/touch0/tapCount"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapCount"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""282a2970-c556-4d27-9122-76d027a138b8"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard"",
            ""id"": ""f77b6aa7-cf9a-4fca-83b9-6f87d8acf6b1"",
            ""actions"": [
                {
                    ""name"": ""MoveForwardPress"",
                    ""type"": ""Button"",
                    ""id"": ""f5a3f260-9c5f-4041-96e3-f17ac74706c5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveForwardRelease"",
                    ""type"": ""Button"",
                    ""id"": ""dc982a55-da27-4d3b-a5c3-10e9398e65a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveBackwardPress"",
                    ""type"": ""Button"",
                    ""id"": ""0310166e-1a58-4bcb-9752-0802862615ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveBackwardRelease"",
                    ""type"": ""Button"",
                    ""id"": ""3e9719cc-3195-49eb-84ce-28855d74995f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRightPress"",
                    ""type"": ""Button"",
                    ""id"": ""e7dd9100-08b5-42b1-9eed-cd8a07e942aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRightRelease"",
                    ""type"": ""Button"",
                    ""id"": ""e6dd5b7c-fbf0-4edc-babf-57546d3ca467"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveLeftPress"",
                    ""type"": ""Button"",
                    ""id"": ""35bb7bd7-9fea-41d6-8ee9-02d29d29d237"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveLeftRelease"",
                    ""type"": ""Button"",
                    ""id"": ""939ecef8-1e2c-4262-928f-fbdb7a1d0c83"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""39bf75cb-f664-450c-8f81-c15d823e1ea3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForwardPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8ad0dfc-90d7-40ac-bd31-bbd04c867bda"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForwardRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d003c217-be01-4c03-80a1-be83de6404bd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveBackwardPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c5acfb1-97f5-40e6-a23a-47ae98c3e28c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveBackwardRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62726a68-48a0-4803-a4a7-eb9330bc2e83"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRightPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c02527cd-c24d-494e-83d8-2878a5f3457b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRightRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3460705a-ab00-4558-ba19-7c2b9c27e34e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeftPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f91daa2-36cb-4597-ab47-05aabd9e8bce"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeftRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Dev Cheats
        m_DevCheats = asset.FindActionMap("Dev Cheats", throwIfNotFound: true);
        m_DevCheats_NextLevel = m_DevCheats.FindAction("Next Level", throwIfNotFound: true);
        m_DevCheats_PrevLevel = m_DevCheats.FindAction("Prev Level", throwIfNotFound: true);
        m_DevCheats_NextStage = m_DevCheats.FindAction("Next Stage", throwIfNotFound: true);
        m_DevCheats_PauseToggle = m_DevCheats.FindAction("PauseToggle", throwIfNotFound: true);
        // Touch
        m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
        m_Touch_TouchDelta = m_Touch.FindAction("TouchDelta", throwIfNotFound: true);
        m_Touch_TouchStartPosition = m_Touch.FindAction("TouchStartPosition", throwIfNotFound: true);
        m_Touch_TouchPress = m_Touch.FindAction("TouchPress", throwIfNotFound: true);
        m_Touch_TouchRelease = m_Touch.FindAction("TouchRelease", throwIfNotFound: true);
        m_Touch_TouchPosition = m_Touch.FindAction("TouchPosition", throwIfNotFound: true);
        m_Touch_TapCount = m_Touch.FindAction("TapCount", throwIfNotFound: true);
        // Keyboard
        m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
        m_Keyboard_MoveForwardPress = m_Keyboard.FindAction("MoveForwardPress", throwIfNotFound: true);
        m_Keyboard_MoveForwardRelease = m_Keyboard.FindAction("MoveForwardRelease", throwIfNotFound: true);
        m_Keyboard_MoveBackwardPress = m_Keyboard.FindAction("MoveBackwardPress", throwIfNotFound: true);
        m_Keyboard_MoveBackwardRelease = m_Keyboard.FindAction("MoveBackwardRelease", throwIfNotFound: true);
        m_Keyboard_MoveRightPress = m_Keyboard.FindAction("MoveRightPress", throwIfNotFound: true);
        m_Keyboard_MoveRightRelease = m_Keyboard.FindAction("MoveRightRelease", throwIfNotFound: true);
        m_Keyboard_MoveLeftPress = m_Keyboard.FindAction("MoveLeftPress", throwIfNotFound: true);
        m_Keyboard_MoveLeftRelease = m_Keyboard.FindAction("MoveLeftRelease", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Dev Cheats
    private readonly InputActionMap m_DevCheats;
    private List<IDevCheatsActions> m_DevCheatsActionsCallbackInterfaces = new List<IDevCheatsActions>();
    private readonly InputAction m_DevCheats_NextLevel;
    private readonly InputAction m_DevCheats_PrevLevel;
    private readonly InputAction m_DevCheats_NextStage;
    private readonly InputAction m_DevCheats_PauseToggle;
    public struct DevCheatsActions
    {
        private @InputActions m_Wrapper;
        public DevCheatsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextLevel => m_Wrapper.m_DevCheats_NextLevel;
        public InputAction @PrevLevel => m_Wrapper.m_DevCheats_PrevLevel;
        public InputAction @NextStage => m_Wrapper.m_DevCheats_NextStage;
        public InputAction @PauseToggle => m_Wrapper.m_DevCheats_PauseToggle;
        public InputActionMap Get() { return m_Wrapper.m_DevCheats; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DevCheatsActions set) { return set.Get(); }
        public void AddCallbacks(IDevCheatsActions instance)
        {
            if (instance == null || m_Wrapper.m_DevCheatsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DevCheatsActionsCallbackInterfaces.Add(instance);
            @NextLevel.started += instance.OnNextLevel;
            @NextLevel.performed += instance.OnNextLevel;
            @NextLevel.canceled += instance.OnNextLevel;
            @PrevLevel.started += instance.OnPrevLevel;
            @PrevLevel.performed += instance.OnPrevLevel;
            @PrevLevel.canceled += instance.OnPrevLevel;
            @NextStage.started += instance.OnNextStage;
            @NextStage.performed += instance.OnNextStage;
            @NextStage.canceled += instance.OnNextStage;
            @PauseToggle.started += instance.OnPauseToggle;
            @PauseToggle.performed += instance.OnPauseToggle;
            @PauseToggle.canceled += instance.OnPauseToggle;
        }

        private void UnregisterCallbacks(IDevCheatsActions instance)
        {
            @NextLevel.started -= instance.OnNextLevel;
            @NextLevel.performed -= instance.OnNextLevel;
            @NextLevel.canceled -= instance.OnNextLevel;
            @PrevLevel.started -= instance.OnPrevLevel;
            @PrevLevel.performed -= instance.OnPrevLevel;
            @PrevLevel.canceled -= instance.OnPrevLevel;
            @NextStage.started -= instance.OnNextStage;
            @NextStage.performed -= instance.OnNextStage;
            @NextStage.canceled -= instance.OnNextStage;
            @PauseToggle.started -= instance.OnPauseToggle;
            @PauseToggle.performed -= instance.OnPauseToggle;
            @PauseToggle.canceled -= instance.OnPauseToggle;
        }

        public void RemoveCallbacks(IDevCheatsActions instance)
        {
            if (m_Wrapper.m_DevCheatsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDevCheatsActions instance)
        {
            foreach (var item in m_Wrapper.m_DevCheatsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DevCheatsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DevCheatsActions @DevCheats => new DevCheatsActions(this);

    // Touch
    private readonly InputActionMap m_Touch;
    private List<ITouchActions> m_TouchActionsCallbackInterfaces = new List<ITouchActions>();
    private readonly InputAction m_Touch_TouchDelta;
    private readonly InputAction m_Touch_TouchStartPosition;
    private readonly InputAction m_Touch_TouchPress;
    private readonly InputAction m_Touch_TouchRelease;
    private readonly InputAction m_Touch_TouchPosition;
    private readonly InputAction m_Touch_TapCount;
    public struct TouchActions
    {
        private @InputActions m_Wrapper;
        public TouchActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchDelta => m_Wrapper.m_Touch_TouchDelta;
        public InputAction @TouchStartPosition => m_Wrapper.m_Touch_TouchStartPosition;
        public InputAction @TouchPress => m_Wrapper.m_Touch_TouchPress;
        public InputAction @TouchRelease => m_Wrapper.m_Touch_TouchRelease;
        public InputAction @TouchPosition => m_Wrapper.m_Touch_TouchPosition;
        public InputAction @TapCount => m_Wrapper.m_Touch_TapCount;
        public InputActionMap Get() { return m_Wrapper.m_Touch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
        public void AddCallbacks(ITouchActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchActionsCallbackInterfaces.Add(instance);
            @TouchDelta.started += instance.OnTouchDelta;
            @TouchDelta.performed += instance.OnTouchDelta;
            @TouchDelta.canceled += instance.OnTouchDelta;
            @TouchStartPosition.started += instance.OnTouchStartPosition;
            @TouchStartPosition.performed += instance.OnTouchStartPosition;
            @TouchStartPosition.canceled += instance.OnTouchStartPosition;
            @TouchPress.started += instance.OnTouchPress;
            @TouchPress.performed += instance.OnTouchPress;
            @TouchPress.canceled += instance.OnTouchPress;
            @TouchRelease.started += instance.OnTouchRelease;
            @TouchRelease.performed += instance.OnTouchRelease;
            @TouchRelease.canceled += instance.OnTouchRelease;
            @TouchPosition.started += instance.OnTouchPosition;
            @TouchPosition.performed += instance.OnTouchPosition;
            @TouchPosition.canceled += instance.OnTouchPosition;
            @TapCount.started += instance.OnTapCount;
            @TapCount.performed += instance.OnTapCount;
            @TapCount.canceled += instance.OnTapCount;
        }

        private void UnregisterCallbacks(ITouchActions instance)
        {
            @TouchDelta.started -= instance.OnTouchDelta;
            @TouchDelta.performed -= instance.OnTouchDelta;
            @TouchDelta.canceled -= instance.OnTouchDelta;
            @TouchStartPosition.started -= instance.OnTouchStartPosition;
            @TouchStartPosition.performed -= instance.OnTouchStartPosition;
            @TouchStartPosition.canceled -= instance.OnTouchStartPosition;
            @TouchPress.started -= instance.OnTouchPress;
            @TouchPress.performed -= instance.OnTouchPress;
            @TouchPress.canceled -= instance.OnTouchPress;
            @TouchRelease.started -= instance.OnTouchRelease;
            @TouchRelease.performed -= instance.OnTouchRelease;
            @TouchRelease.canceled -= instance.OnTouchRelease;
            @TouchPosition.started -= instance.OnTouchPosition;
            @TouchPosition.performed -= instance.OnTouchPosition;
            @TouchPosition.canceled -= instance.OnTouchPosition;
            @TapCount.started -= instance.OnTapCount;
            @TapCount.performed -= instance.OnTapCount;
            @TapCount.canceled -= instance.OnTapCount;
        }

        public void RemoveCallbacks(ITouchActions instance)
        {
            if (m_Wrapper.m_TouchActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchActions @Touch => new TouchActions(this);

    // Keyboard
    private readonly InputActionMap m_Keyboard;
    private List<IKeyboardActions> m_KeyboardActionsCallbackInterfaces = new List<IKeyboardActions>();
    private readonly InputAction m_Keyboard_MoveForwardPress;
    private readonly InputAction m_Keyboard_MoveForwardRelease;
    private readonly InputAction m_Keyboard_MoveBackwardPress;
    private readonly InputAction m_Keyboard_MoveBackwardRelease;
    private readonly InputAction m_Keyboard_MoveRightPress;
    private readonly InputAction m_Keyboard_MoveRightRelease;
    private readonly InputAction m_Keyboard_MoveLeftPress;
    private readonly InputAction m_Keyboard_MoveLeftRelease;
    public struct KeyboardActions
    {
        private @InputActions m_Wrapper;
        public KeyboardActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveForwardPress => m_Wrapper.m_Keyboard_MoveForwardPress;
        public InputAction @MoveForwardRelease => m_Wrapper.m_Keyboard_MoveForwardRelease;
        public InputAction @MoveBackwardPress => m_Wrapper.m_Keyboard_MoveBackwardPress;
        public InputAction @MoveBackwardRelease => m_Wrapper.m_Keyboard_MoveBackwardRelease;
        public InputAction @MoveRightPress => m_Wrapper.m_Keyboard_MoveRightPress;
        public InputAction @MoveRightRelease => m_Wrapper.m_Keyboard_MoveRightRelease;
        public InputAction @MoveLeftPress => m_Wrapper.m_Keyboard_MoveLeftPress;
        public InputAction @MoveLeftRelease => m_Wrapper.m_Keyboard_MoveLeftRelease;
        public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
        public void AddCallbacks(IKeyboardActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyboardActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyboardActionsCallbackInterfaces.Add(instance);
            @MoveForwardPress.started += instance.OnMoveForwardPress;
            @MoveForwardPress.performed += instance.OnMoveForwardPress;
            @MoveForwardPress.canceled += instance.OnMoveForwardPress;
            @MoveForwardRelease.started += instance.OnMoveForwardRelease;
            @MoveForwardRelease.performed += instance.OnMoveForwardRelease;
            @MoveForwardRelease.canceled += instance.OnMoveForwardRelease;
            @MoveBackwardPress.started += instance.OnMoveBackwardPress;
            @MoveBackwardPress.performed += instance.OnMoveBackwardPress;
            @MoveBackwardPress.canceled += instance.OnMoveBackwardPress;
            @MoveBackwardRelease.started += instance.OnMoveBackwardRelease;
            @MoveBackwardRelease.performed += instance.OnMoveBackwardRelease;
            @MoveBackwardRelease.canceled += instance.OnMoveBackwardRelease;
            @MoveRightPress.started += instance.OnMoveRightPress;
            @MoveRightPress.performed += instance.OnMoveRightPress;
            @MoveRightPress.canceled += instance.OnMoveRightPress;
            @MoveRightRelease.started += instance.OnMoveRightRelease;
            @MoveRightRelease.performed += instance.OnMoveRightRelease;
            @MoveRightRelease.canceled += instance.OnMoveRightRelease;
            @MoveLeftPress.started += instance.OnMoveLeftPress;
            @MoveLeftPress.performed += instance.OnMoveLeftPress;
            @MoveLeftPress.canceled += instance.OnMoveLeftPress;
            @MoveLeftRelease.started += instance.OnMoveLeftRelease;
            @MoveLeftRelease.performed += instance.OnMoveLeftRelease;
            @MoveLeftRelease.canceled += instance.OnMoveLeftRelease;
        }

        private void UnregisterCallbacks(IKeyboardActions instance)
        {
            @MoveForwardPress.started -= instance.OnMoveForwardPress;
            @MoveForwardPress.performed -= instance.OnMoveForwardPress;
            @MoveForwardPress.canceled -= instance.OnMoveForwardPress;
            @MoveForwardRelease.started -= instance.OnMoveForwardRelease;
            @MoveForwardRelease.performed -= instance.OnMoveForwardRelease;
            @MoveForwardRelease.canceled -= instance.OnMoveForwardRelease;
            @MoveBackwardPress.started -= instance.OnMoveBackwardPress;
            @MoveBackwardPress.performed -= instance.OnMoveBackwardPress;
            @MoveBackwardPress.canceled -= instance.OnMoveBackwardPress;
            @MoveBackwardRelease.started -= instance.OnMoveBackwardRelease;
            @MoveBackwardRelease.performed -= instance.OnMoveBackwardRelease;
            @MoveBackwardRelease.canceled -= instance.OnMoveBackwardRelease;
            @MoveRightPress.started -= instance.OnMoveRightPress;
            @MoveRightPress.performed -= instance.OnMoveRightPress;
            @MoveRightPress.canceled -= instance.OnMoveRightPress;
            @MoveRightRelease.started -= instance.OnMoveRightRelease;
            @MoveRightRelease.performed -= instance.OnMoveRightRelease;
            @MoveRightRelease.canceled -= instance.OnMoveRightRelease;
            @MoveLeftPress.started -= instance.OnMoveLeftPress;
            @MoveLeftPress.performed -= instance.OnMoveLeftPress;
            @MoveLeftPress.canceled -= instance.OnMoveLeftPress;
            @MoveLeftRelease.started -= instance.OnMoveLeftRelease;
            @MoveLeftRelease.performed -= instance.OnMoveLeftRelease;
            @MoveLeftRelease.canceled -= instance.OnMoveLeftRelease;
        }

        public void RemoveCallbacks(IKeyboardActions instance)
        {
            if (m_Wrapper.m_KeyboardActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyboardActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyboardActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyboardActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeyboardActions @Keyboard => new KeyboardActions(this);
    public interface IDevCheatsActions
    {
        void OnNextLevel(InputAction.CallbackContext context);
        void OnPrevLevel(InputAction.CallbackContext context);
        void OnNextStage(InputAction.CallbackContext context);
        void OnPauseToggle(InputAction.CallbackContext context);
    }
    public interface ITouchActions
    {
        void OnTouchDelta(InputAction.CallbackContext context);
        void OnTouchStartPosition(InputAction.CallbackContext context);
        void OnTouchPress(InputAction.CallbackContext context);
        void OnTouchRelease(InputAction.CallbackContext context);
        void OnTouchPosition(InputAction.CallbackContext context);
        void OnTapCount(InputAction.CallbackContext context);
    }
    public interface IKeyboardActions
    {
        void OnMoveForwardPress(InputAction.CallbackContext context);
        void OnMoveForwardRelease(InputAction.CallbackContext context);
        void OnMoveBackwardPress(InputAction.CallbackContext context);
        void OnMoveBackwardRelease(InputAction.CallbackContext context);
        void OnMoveRightPress(InputAction.CallbackContext context);
        void OnMoveRightRelease(InputAction.CallbackContext context);
        void OnMoveLeftPress(InputAction.CallbackContext context);
        void OnMoveLeftRelease(InputAction.CallbackContext context);
    }
}
